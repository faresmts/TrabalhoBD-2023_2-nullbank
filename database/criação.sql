-- MySQL Script generated by MySQL Workbench
-- Tue Nov 21 01:42:48 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Equipe512210
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Equipe512210
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Equipe512210` ;
USE `Equipe512210` ;

-- -----------------------------------------------------
-- Table `Equipe512210`.`logradouro_tipos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`logradouro_tipos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`enderecos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`enderecos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `logradouro_tipo_id` INT NOT NULL,
  `logradouro` VARCHAR(45) NOT NULL,
  `numero` VARCHAR(5) NOT NULL,
  `bairro` VARCHAR(45) NOT NULL,
  `cep` CHAR(8) NOT NULL,
  `cidade` VARCHAR(45) NOT NULL,
  `estado` CHAR(2) NOT NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_enderecos_logradouro_tipos1_idx` (`logradouro_tipo_id` ASC) VISIBLE,
  CONSTRAINT `fk_enderecos_logradouro_tipos1`
    FOREIGN KEY (`logradouro_tipo_id`)
    REFERENCES `Equipe512210`.`logradouro_tipos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`agencias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`agencias` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `endereco_id` INT NOT NULL,
  `montante_salarios` DECIMAL(10,2) NOT NULL DEFAULT 0,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_agencias_enderecos1_idx` (`endereco_id` ASC) VISIBLE,
  CONSTRAINT `fk_agencias_enderecos1`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `Equipe512210`.`enderecos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`usuarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `sobrenome` VARCHAR(45) NOT NULL,
  `pronomes` ENUM('ele/dele', 'ela/dela', 'neutros') NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `email_verified_at` TIMESTAMP NULL,
  `password` VARCHAR(100) NOT NULL,
  `endereco_id` INT NOT NULL,
  `sexo` ENUM('M', 'F', 'O') NOT NULL,
  `nascido_em` DATE NOT NULL,
  `remember_token` VARCHAR(100) NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_usuarios_enderecos1_idx` (`endereco_id` ASC) VISIBLE,
  CONSTRAINT `fk_usuarios_enderecos1`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `Equipe512210`.`enderecos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`funcionarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`funcionarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NOT NULL,
  `agencia_id` INT NOT NULL,
  `matricula` VARCHAR(45) NOT NULL,
  `senha` VARCHAR(100) NOT NULL,
  `cargo` ENUM('G', 'A', 'C') NOT NULL,
  `salario` DECIMAL(8,2) NOT NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_funcionarios_usuarios_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `fk_funcionarios_agencias1_idx` (`agencia_id` ASC) VISIBLE,
  UNIQUE INDEX `matricula_UNIQUE` (`matricula` ASC) VISIBLE,
  CONSTRAINT `fk_funcionarios_usuarios`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `Equipe512210`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionarios_agencias1`
    FOREIGN KEY (`agencia_id`)
    REFERENCES `Equipe512210`.`agencias` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`dependentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`dependentes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `funcionario_id` INT NOT NULL,
  `nome` VARCHAR(100) NOT NULL,
  `nascido_em` DATE NOT NULL,
  `parentesco` ENUM('F', 'C', 'G') NOT NULL,
  `idade` INT NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`, `funcionario_id`),
  INDEX `fk_dependentes_funcionarios1_idx` (`funcionario_id` ASC) VISIBLE,
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) VISIBLE,
  CONSTRAINT `fk_dependentes_funcionarios1`
    FOREIGN KEY (`funcionario_id`)
    REFERENCES `Equipe512210`.`funcionarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`clientes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`clientes` (
  `cpf` CHAR(11) NOT NULL,
  `usuario_id` INT NOT NULL,
  `rg` VARCHAR(15) NOT NULL,
  `rg_emitido_por` VARCHAR(45) NOT NULL,
  `uf` CHAR(2) NOT NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`cpf`),
  INDEX `fk_clientes_usuarios1_idx` (`usuario_id` ASC) VISIBLE,
  UNIQUE INDEX `rg_UNIQUE` (`rg` ASC) VISIBLE,
  CONSTRAINT `fk_clientes_usuarios1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `Equipe512210`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`contas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`contas` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `agencia_id` INT NOT NULL,
  `gerente_id` INT NOT NULL,
  `saldo` DECIMAL(12,2) NOT NULL DEFAULT 0,
  `senha` VARCHAR(100) NOT NULL,
  `tipo` ENUM('CC', 'CP', 'CE') NOT NULL,
  `juros` DECIMAL(5,2) NULL DEFAULT 0,
  `limite_credito` DECIMAL(10,2) NULL DEFAULT 0,
  `credito_usado` DECIMAL(10,2) NULL DEFAULT 0,
  `aniversario` DATE NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`, `agencia_id`),
  INDEX `fk_contas_funcionarios1_idx` (`gerente_id` ASC) VISIBLE,
  INDEX `fk_contas_agencias1_idx` (`agencia_id` ASC) VISIBLE,
  CONSTRAINT `fk_contas_funcionarios1`
    FOREIGN KEY (`gerente_id`)
    REFERENCES `Equipe512210`.`funcionarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contas_agencias1`
    FOREIGN KEY (`agencia_id`)
    REFERENCES `Equipe512210`.`agencias` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`transacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`transacoes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `conta_id` INT NOT NULL,
  `origem` ENUM('Saldo', 'Credito') NOT NULL,
  `tipo` ENUM('Saque', 'Deposito', 'Pagamento', 'Estorno', 'Transferencia') NOT NULL,
  `valor` DECIMAL(12,2) NOT NULL,
  `created_at` DATETIME NULL,
  `updated_at` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_transacoes_contas1_idx` (`conta_id` ASC) VISIBLE,
  CONSTRAINT `fk_transacoes_contas1`
    FOREIGN KEY (`conta_id`)
    REFERENCES `Equipe512210`.`contas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`permissoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`permissoes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`permissao_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`permissao_usuario` (
  `usuario_id` INT NOT NULL,
  `permissao_id` INT NOT NULL,
  PRIMARY KEY (`usuario_id`, `permissao_id`),
  INDEX `fk_usuarios_has_permissoes_permissoes1_idx` (`permissao_id` ASC) VISIBLE,
  INDEX `fk_usuarios_has_permissoes_usuarios1_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_usuarios_has_permissoes_usuarios1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `Equipe512210`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuarios_has_permissoes_permissoes1`
    FOREIGN KEY (`permissao_id`)
    REFERENCES `Equipe512210`.`permissoes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`telefones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`telefones` (
  `numero` VARCHAR(11) NOT NULL,
  `cliente_cpf` CHAR(11) NOT NULL,
  `descricao` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`numero`, `cliente_cpf`),
  INDEX `fk_telefones_clientes1_idx` (`cliente_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_telefones_clientes1`
    FOREIGN KEY (`cliente_cpf`)
    REFERENCES `Equipe512210`.`clientes` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`emails` (
  `endereco` VARCHAR(60) NOT NULL,
  `cliente_cpf` CHAR(11) NOT NULL,
  `descricao` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`endereco`, `cliente_cpf`),
  INDEX `fk_emails_clientes1_idx` (`cliente_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_emails_clientes1`
    FOREIGN KEY (`cliente_cpf`)
    REFERENCES `Equipe512210`.`clientes` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe512210`.`cliente_conta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Equipe512210`.`cliente_conta` (
  `conta_id` INT NOT NULL,
  `agencia_id` INT NOT NULL,
  `cliente_cpf` CHAR(11) NOT NULL,
  PRIMARY KEY (`conta_id`, `agencia_id`, `cliente_cpf`),
  INDEX `fk_contas_has_clientes_clientes1_idx` (`cliente_cpf` ASC) VISIBLE,
  INDEX `fk_contas_has_clientes_contas1_idx` (`conta_id` ASC, `agencia_id` ASC) VISIBLE,
  CONSTRAINT `fk_contas_has_clientes_contas1`
    FOREIGN KEY (`conta_id` , `agencia_id`)
    REFERENCES `Equipe512210`.`contas` (`id` , `agencia_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contas_has_clientes_clientes1`
    FOREIGN KEY (`cliente_cpf`)
    REFERENCES `Equipe512210`.`clientes` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `Equipe512210`;

DELIMITER $$
USE `Equipe512210`$$
CREATE TRIGGER trigger_salario_base
	BEFORE INSERT ON funcionarios
	FOR EACH ROW
BEGIN
	IF NEW.salario < 2286 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Salário deve ser maior do que o base (2.286,00)';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_update_montante_salarios_insert
	AFTER INSERT ON funcionarios
	FOR EACH ROW
BEGIN
	DECLARE total_salarios DECIMAL(10,2);

	SELECT SUM(salario) INTO total_salarios
	FROM funcionarios
	WHERE agencia_id = NEW.agencia_id;

	UPDATE agencias
	SET montante_salarios = total_salarios
	WHERE id = NEW.agencia_id;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_update_montante_salarios_update
	AFTER UPDATE ON funcionarios
	FOR EACH ROW
BEGIN
	DECLARE total_salarios DECIMAL(10,2);

	SELECT SUM(salario) INTO total_salarios
	FROM funcionarios
	WHERE agencia_id = NEW.agencia_id;

	UPDATE agencias
	SET montante_salarios = total_salarios
	WHERE id = NEW.agencia_id;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_update_montante_salarios_delete
	AFTER DELETE ON funcionarios
	FOR EACH ROW
BEGIN
	DECLARE total_salarios DECIMAL(10,2);

	SELECT SUM(salario) INTO total_salarios
	FROM funcionarios
	WHERE agencia_id = OLD.agencia_id;

	UPDATE agencias
	SET montante_salarios = total_salarios
	WHERE id = OLD.agencia_id;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_idade_dependentes_insert
    BEFORE INSERT ON dependentes
    FOR EACH ROW
BEGIN
    -- Calcular a idade
    SET NEW.idade = TIMESTAMPDIFF(YEAR, NEW.nascido_em, NOW());
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_no_maximo_5_dependentes_insert
	BEFORE INSERT ON dependentes
	FOR EACH ROW
BEGIN
	DECLARE total_dependentes INT;

	-- Contar o número de dependentes para o funcionário
	SELECT COUNT(*) INTO total_dependentes
	FROM dependentes
	WHERE funcionario_id = NEW.funcionario_id;

	-- Se a contagem for maior que 5, impedir a inserção
	IF total_dependentes >= 5 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'O funcionário já possui o número máximo de dependentes permitido (5)';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_gerente_da_mesma_agencia_insert
	BEFORE INSERT ON contas
	FOR EACH ROW
BEGIN
	DECLARE gerente_agencia_id INT;

	SELECT funcionarios.agencia_id
	INTO gerente_agencia_id
	FROM funcionarios
	WHERE funcionarios.id = NEW.gerente_id;

	-- Se o gerente que estamos inserindo é da mesma agência que estamos criando
	IF gerente_agencia_id != NEW.agencia_id THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'O gerente não pertence à agência correspondente da inserção';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_validar_tipos_de_contas_insert
	BEFORE INSERT ON contas
	FOR EACH ROW
BEGIN
	IF NEW.tipo = 'CC' AND NEW.aniversario IS NULL THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Corrente com aniversario nulo';
	END IF;

	IF NEW.tipo = 'CC' AND NEW.aniversario IS NOT NULL AND
	   (NEW.limite_credito > 0 OR NEW.credito_usado > 0 OR NEW.juros > 0) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Corrente com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CP' AND (NEW.juros <= 0 OR NEW.juros IS NULL) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Poupança com juros menor ou igual a zero';
	END IF;

	IF NEW.tipo = 'CP' AND NEW.juros > 0 AND
	   (NEW.limite_credito > 0 OR NEW.credito_usado > 0 OR NEW.aniversario IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Poupança com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CE' AND NEW.limite_credito > 0 AND
	   (NEW.aniversario IS NOT NULL OR NEW.juros > 0) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Especial com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CE' AND NEW.limite_credito <= 0 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Especial com limites de credito menor ou igual a zero';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_validar_tipos_de_contas_update
	BEFORE UPDATE ON contas
	FOR EACH ROW
BEGIN
	IF NEW.tipo = 'CC' AND NEW.aniversario IS NULL THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Corrente com aniversario nulo';
	END IF;

	IF NEW.tipo = 'CC' AND NEW.aniversario IS NOT NULL AND
	   (NEW.limite_credito > 0 OR NEW.credito_usado > 0 OR NEW.juros > 0) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Corrente com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CP' AND (NEW.juros <= 0 OR NEW.juros IS NULL) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Poupança com juros menor ou igual a zero';
	END IF;

	IF NEW.tipo = 'CP' AND NEW.juros > 0 AND
	   (NEW.limite_credito > 0 OR NEW.credito_usado > 0 OR NEW.aniversario IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Poupança com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CE' AND NEW.limite_credito > 0 AND
	   (NEW.aniversario IS NOT NULL OR NEW.juros > 0) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Especial com campos não permitidos';
	END IF;

	IF NEW.tipo = 'CE' AND NEW.limite_credito <= 0 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Inserção em contas não permitida: quebra de regra ao inserir Conta Especial com limites de credito menor ou igual a zero';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_atualizar_saldo_insert
	AFTER INSERT ON transacoes
	FOR EACH ROW
BEGIN
	IF NEW.origem = 'Saldo' THEN
		UPDATE contas
		SET contas.saldo = contas.saldo - NEW.valor
		WHERE id = NEW.conta_id;
	END IF;

	IF NEW.origem = 'Credito' THEN
		UPDATE contas
		SET contas.limite_credito = contas.limite_credito - NEW.valor,
			contas.credito_usado = contas.credito_usado + NEW.valor
		WHERE id = NEW.conta_id;
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_saldo_e_credito_nao_podem_ficar_negativados
	BEFORE INSERT ON transacoes
	FOR EACH ROW
BEGIN
	DECLARE saldo_conta DECIMAL(12,2);
	DECLARE limite_credito_conta DECIMAL(10,2);

	SELECT contas.saldo
	INTO saldo_conta
	FROM contas
	WHERE contas.id = NEW.conta_id;

	SELECT contas.limite_credito
	INTO limite_credito_conta
	FROM contas
	WHERE contas.id = NEW.conta_id;

	IF NEW.valor > saldo_conta AND NEW.origem = 'Saldo' THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'O valor não pode ser maior do que o saldo disponível';
	END IF;

	IF NEW.valor > limite_credito_conta AND NEW.origem = 'Credito' THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'O valor não pode ser maior do que o limite de crédito disponível';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_bloquear_delecoes_transacoes
	BEFORE DELETE ON transacoes
	FOR EACH ROW
BEGIN
	SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Deleções nesta tabela são bloqueadas';
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_bloquear_updates_transacoes
	BEFORE UPDATE ON transacoes
	FOR EACH ROW
BEGIN
	SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Atualizações nesta tabela são bloqueadas';
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_no_maximo_2_clientes_por_conta
	BEFORE INSERT ON cliente_conta
	FOR EACH ROW
BEGIN
	DECLARE total_clientes INT;

	-- Contar o número de clientes para a conta que estamos tentando inserir
	SELECT COUNT(*) INTO total_clientes
	FROM cliente_conta
	WHERE conta_id = NEW.conta_id;

	-- Se a contagem for maior que 2, impedir a inserção
	IF total_clientes >= 2 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'A conta já possui o número máximo de clientes permitido (2)';
	END IF;
END;$$

USE `Equipe512210`$$
CREATE TRIGGER trigger_no_maximo_uma_conta_por_agencia
	BEFORE INSERT ON cliente_conta
	FOR EACH ROW
BEGIN
	DECLARE total_contas INT;

	SELECT COUNT(*)
	INTO total_contas
	FROM cliente_conta
	WHERE cliente_cpf = NEW.cliente_cpf AND agencia_id = NEW.agencia_id;

	-- Se a contagem for maior que 0, impedir a inserção
	IF total_contas > 0 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'A agência já possui uma conta associada ao cliente';
	END IF;
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
